{"version":3,"sources":["modules/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","state","setState","bool","setBool","dot","setDot","entryNumber","num","length","restart","erase","slice","calculate","last","preResult","String","eval","result","substring","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73e5ee45.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport './Calculator.css'\r\n\r\nexport default function Calculator() {\r\n\r\n  const [state, setState]=useState('Welcome')\r\n  const [bool, setBool]=useState(false)\r\n  const [dot, setDot]=useState(true)\r\n\r\n  function entryNumber (num) {\r\n    if (state.length>=13) setState(state)\r\n    else if (state=== ('Infinity') ||state=== ('NaN') ||state=== ('Welcome')) {\r\n      setState('')\r\n    }else{\r\n\r\n    switch(num){\r\n      case '+': if (bool){\r\n        setState(state+num)\r\n        setBool(false)\r\n        setDot(true)\r\n        break\r\n      }break\r\n      case '-': if (bool){\r\n        setState(state+num)\r\n        setBool(false)\r\n        setDot(true)\r\n        break\r\n      }break\r\n      case '/': if (bool){\r\n        setState(state+num)\r\n        setBool(false)\r\n        setDot(true)\r\n        break\r\n      }break\r\n      case '*': if (bool){\r\n        setState(state+num)\r\n        setBool(false)\r\n        setDot(true)\r\n        break\r\n      }break\r\n      case '.': if (bool){\r\n        if (dot===false){\r\n          setState(state)\r\n          break\r\n        }\r\n        else {setState(state+num)\r\n          setBool(false)\r\n          setDot(false)\r\n        break\r\n        }\r\n      }break\r\n      default: {\r\n        state!=='0' ? setState(state+num) : setState(num)\r\n        setBool(true)\r\n      }\r\n    }\r\n  }\r\n  }\r\n   \r\n  function restart () {\r\n    setState('')\r\n    setDot(true)\r\n  }\r\n  \r\n  function erase () {\r\n    if (state=== ('Infinity') ||state=== ('NaN') ||state=== ('Welcome')) {\r\n      setState('')\r\n    }else{\r\n    setState(state.slice([0],state.length-1))\r\n    }\r\n  }\r\n  \r\n  function calculate() {\r\n    if (state=== ('Welcome')) setState(\"\")\r\n    else if (state===('')) setState(\"\")\r\n    else{\r\n      let last=(state[state.length-1])\r\n      \r\n      if (last==='-' ||last==='+' ||last==='*' ||last==='/') setState('NaN')\r\n      else {\r\n      let preResult=String(eval(state))\r\n      \r\n      let result= preResult.substring(0,13)\r\n      setState(String(result))\r\n      }\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className='container'>\r\n      \r\n      <div className={\"fondo\"}>\r\n        <div>\r\n          <div className='display' >{state}</div>\r\n        </div>\r\n        \r\n        <div className='contDisplay'>\r\n          <button className={'boton botonC'} onClick={()=>restart()}>Restart</button>\r\n          <button className={'boton boton2'} onClick={()=>erase()}>Del</button>\r\n          <button className={'boton boton2'} onClick={()=>entryNumber('/')}>/</button>\r\n        </div>\r\n        <div>\r\n          <button className={'boton'} onClick={()=>entryNumber('7')}>7</button>\r\n          <button className={'boton'} onClick={()=>entryNumber('8')}>8</button>\r\n          <button className={'boton'} onClick={()=>entryNumber('9')}>9</button>\r\n          <button className={'boton boton2'} onClick={()=>entryNumber('*')}>x</button>\r\n        </div>\r\n        <div>\r\n          <button className={'boton'} onClick={()=>entryNumber('4')}>4</button>\r\n          <button className={'boton'} onClick={()=>entryNumber('5')}>5</button>\r\n          <button className={'boton'} onClick={()=>entryNumber('6')}>6</button>\r\n          <button className={'boton boton2'} onClick={()=>entryNumber('+')}>+</button>\r\n        </div>\r\n        <div>\r\n          <button className={'boton'} onClick={()=>entryNumber('1')}>1</button>\r\n          <button className={'boton'} onClick={()=>entryNumber('2')}>2</button>\r\n          <button className={'boton'} onClick={()=>entryNumber('3')}>3</button>\r\n          <button className={'boton boton2'} onClick={()=>entryNumber('-')}>-</button>\r\n        </div>\r\n        <div>\r\n          <button className={'boton'} onClick={()=>entryNumber('0')}>0</button>\r\n          <button className={'boton boton2'} onClick={()=>entryNumber('.')}>.</button>\r\n          <button className={'boton boton2 botonI'} onClick={calculate}>=</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Calculator from './modules/Calculator'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>Hello World, I'm Gabriel Pereyra!</h2>\r\n      <Calculator></Calculator>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}